# R0 is destination register

# R1 holds byte 1
# R2 holds byte 2

# R3 is free

# R4 holds the 5 parity bits

# R5 holds output byte

# R6 holds input memory address
# R7 holds output memory address

setbranch whileloop 00001
setbranch recovery 00010
setbranch invalid_output 00011

setbranch skip_b11 00100
setbranch skip_b10 00101
setbranch skip_b9 00110
setbranch skip_b8 00111
setbranch skip_b7 01000
setbranch skip_b6 01001
setbranch skip_b5 01010
setbranch skip_b4 01011
setbranch skip_b3 01100
setbranch skip_b2 01101
setbranch skip_b1 01110

# Sets r5 & r6 to 0
set 00000000
move r0 r5
move r0 r6

# Sets r7 to 30
set 00011110 # set r0 to 30
move r0 r7   # moves r0 to r7

# WHILE R7 < 30     (condition set at branch)

# Load bytes 1 and 2 into r1 and r2
whileloop: move r7 r0
load r2
increment r0
load r1

# Reset r4
set 00000000
move r0 r4



# GENERATE P8 (b11:5)

# Load bytes 1 & 2
move r7 r0
load r2
increment r0
load r1

# Reset r3
set 00000000
move r0 r3

# Shift bits from byte 1
lshiftc r1 # b11
lshiftc r3
lshiftc r1 # b10
lshiftc r3
lshiftc r1 # b9
lshiftc r3
lshiftc r1 # b8
lshiftc r3
lshiftc r1 # b7
lshiftc r3
lshiftc r1 # b6
lshiftc r3
lshiftc r1 # b5
lshiftc r3
lshiftc r1 # p8

# Shift bits from byte 2
lshiftc r2 # b4
lshiftc r2 # b3
lshiftc r2 # b2
lshiftc r2 # p4
lshiftc r2 # b1
lshiftc r2 # p2
lshiftc r2 # p1
lshiftc r2 # p0

# RXOR the bits in r3, shift the parity bit into r4
rxor r3
rshiftc r0
lshiftc r4


# GENERATE P4 (b11:8,4,3,2)

# Load bytes 1 & 2
move r7 r0
load r2
increment r0
load r1

# Reset r3
set 00000000
move r0 r3

# Shift bits from byte 1
lshiftc r1 # b11
lshiftc r3
lshiftc r1 # b10
lshiftc r3
lshiftc r1 # b9
lshiftc r3
lshiftc r1 # b8
lshiftc r3
lshiftc r1 # b7
lshiftc r1 # b6
lshiftc r1 # b5
lshiftc r1 # p8

# Shift bits from byte 2
lshiftc r2 # b4
lshiftc r3
lshiftc r2 # b3
lshiftc r3
lshiftc r2 # b2
lshiftc r3
lshiftc r2 # p4
lshiftc r2 # b1
lshiftc r2 # p2
lshiftc r2 # p1
lshiftc r2 # p0

# RXOR the bits in r3, shift the parity bit into r4
rxor r3
rshiftc r0
lshiftc r4



# GENERATE P2 (b11,10,7,6,4,3,1)

# Load bytes 1 & 2
move r7 r0
load r2
increment r0
load r1

# Reset r3
set 00000000
move r0 r3

# Shift bits from byte 1
lshiftc r1 # b11
lshiftc r3
lshiftc r1 # b10
lshiftc r3
lshiftc r1 # b9
lshiftc r1 # b8
lshiftc r1 # b7
lshiftc r3
lshiftc r1 # b6
lshiftc r3
lshiftc r1 # b5
lshiftc r1 # p8

# Shift bits from byte 2
lshiftc r2 # b4
lshiftc r3
lshiftc r2 # b3
lshiftc r3
lshiftc r2 # b2
lshiftc r2 # p4
lshiftc r2 # b1
lshiftc r3
lshiftc r2 # p2
lshiftc r2 # p1
lshiftc r2 # p0

# RXOR the bits in r3, shift the parity bit into r4
rxor r3
rshiftc r0
lshiftc r4



# GENERATE P1 (11,9,7,5,4,2,1)

# Load bytes 1 & 2
move r7 r0
load r2
increment r0
load r1

# Reset r3
set 00000000
move r0 r3

# Shift bits from byte 1
lshiftc r1 # b11
lshiftc r3
lshiftc r1 # b10
lshiftc r1 # b9
lshiftc r3
lshiftc r1 # b8
lshiftc r1 # b7
lshiftc r3
lshiftc r1 # b6
lshiftc r1 # b5
lshiftc r3
lshiftc r1 # p8

# Shift bits from byte 2
lshiftc r2 # b4
lshiftc r3
lshiftc r2 # b3
lshiftc r2 # b2
lshiftc r3
lshiftc r2 # p4
lshiftc r2 # b1
lshiftc r3
lshiftc r2 # p2
lshiftc r2 # p1
lshiftc r2 # p0

# RXOR the bits in r3, shift the parity bit into r4
rxor r3
rshiftc r0
lshiftc r4



# GENERATE P0

# Load bytes 1 & 2
move r7 r0
load r2
increment r0
load r1

# Reset r3
set 00000000
move r0 r3

# Find the rxor of byte 1 and shift into byte 2
rxor r1
rshiftc r0
rshiftc r2

# Move byte 2 into r3
move r2 r3

# RXOR the bits in r3, shift the parity bit into r4
rxor r3
rshiftc r0
lshiftc r4



# Gather the actual 5 parity bits and store them in r5

# Load bytes 1 & 2
move r7 r0
load r2
increment r0
load r1

# Reset r3 & r5
set 00000000
move r0 r3
move r0 r5

# Shift bits from byte 1
lshiftc r1 # b11
lshiftc r1 # b10
lshiftc r1 # b9
lshiftc r1 # b8
lshiftc r1 # b7
lshiftc r1 # b6
lshiftc r1 # b5
lshiftc r1 # p8
lshiftc r5

# Shift bits from byte 2
lshiftc r2 # b4
lshiftc r2 # b3
lshiftc r2 # b2
lshiftc r2 # p4
lshiftc r5
lshiftc r2 # b1
lshiftc r2 # p2
lshiftc r5
lshiftc r2 # p1
lshiftc r5
lshiftc r2 # p0
lshiftc r5




# HERE THERE ARE TWO POSSIBILITIES:
#   1: The calculated and actual p0 match. In this case, 0 or 2 bits have been swapped.
#   2: The calculated and actual p0 conflict. In this case, 1 bit has been swapped.
# To figure out what to do, we'll check if they're equal and jump if they are.

# Load bytes 1 & 2
move r7 r0
load r2
increment r0
load r1

# The calculated parity bit is in b8 of r4
# The actual parity bit is in b8 of r2
# We'll reset r3, shift in both bits
set 00000000
move r0 r3
move r4 r0
rshiftc r0
rshiftc r3
move r2 r0
rshiftc r0
rshiftc r3

# Now r3 only carries the two parity bits. XOR and check for equality.
rxor r3
move r0 r3
set 00000000
move r0 r1

# If the XOR != 0 (bits are not equal), jump to the RECOVERY section. Otherwise, do VERICIATION.
bneq r3 r1 recovery

# VERIFICATION:

# Compare calculated parity bits (r4) and actual parity bits (r5). If they're equal, input is valid. If they're not, input is invalid.
bneq r4 r5 invalid_output


# IF THE OUTPUT IS VALID:

# Generate output byte 1 (00000BA9)

# Load bytes 1 & 2
move r7 r0
load r2
increment r0
load r1

# Reset r3 & r4
set 00000000
move r0 r3
move r0 r5

# Shift bits from byte 1
lshiftc r1 # b11
lshiftc r3
lshiftc r1 # b10
lshiftc r3
lshiftc r1 # b9
lshiftc r3



# Generate output byte 2 (87654321)

# Load bytes 1 & 2
move r7 r0
load r2
increment r0
load r1

# Shift bits from byte 1
lshiftc r1 # b11
lshiftc r1 # b10
lshiftc r1 # b9
lshiftc r1 # b8
lshiftc r4
lshiftc r1 # b7
lshiftc r4
lshiftc r1 # b6
lshiftc r4
lshiftc r1 # b5
lshiftc r4

# Shift bits from byte 2
lshiftc r2 # b4
lshiftc r4
lshiftc r2 # b3
lshiftc r4
lshiftc r2 # b2
lshiftc r4
lshiftc r2 # p4
lshiftc r2 # b1
lshiftc r4

# Output 00000000 00000000
move r6 r0
store r4
increment r0
store r3

# Increment counters by 2
increment r6
increment r6
increment r7
increment r7

# Set r3 to 30
set 00011110
move r0 r3

# If r6 is less than 30, repeat the loop
blt r6 r3 whileloop

# Done flag
done



# If the parity bits are all good:

# Output 11111111 11111111
invalid_output: set 11111111
move r0 r1
move r6 r0
store r1
increment r0
store r1

# Increment counters by 2
increment r6
increment r6
increment r7
increment r7

# Set r3 to 30
set 00011110
move r0 r3

# If r6 is less than 30, repeat the loop
blt r6 r3 whileloop

# Done flag
done










# RECOVERY:

# Load bytes 1 & 2
recovery: move r7 r0
load r2
increment r0
load r1

# Right now calculated parity bits are in r4, actual parity bits are in r5. RXOR them one by one and store in r3.
set 00000000
rshiftc r4
rshiftc r0
rshiftc r5
rshiftc r0
rxor r0
rshiftc r0
rshiftc r3

set 00000000
rshiftc r4
rshiftc r0
rshiftc r5
rshiftc r0
rxor r0
rshiftc r0
rshiftc r3

set 00000000
rshiftc r4
rshiftc r0
rshiftc r5
rshiftc r0
rxor r0
rshiftc r0
rshiftc r3

set 00000000
rshiftc r4
rshiftc r0
rshiftc r5
rshiftc r0
rxor r0
rshiftc r0
rshiftc r3

set 00000000
rshiftc r4
rshiftc r0
rshiftc r5
rshiftc r0
rxor r0
rshiftc r0
rshiftc r3

# Move the parity bits to the end (XXXXX000 -> 000XXXXX)
rshift0 r3
rshift0 r3
rshift0 r3

# Parity bit XORs are now calculated and stored in r3.

# We'll now generate the 2 output bytes. We will output 1 at a time from r1.

# GENERATE OUTPUT BYTE 1

# Reset r1
set 00000000
move r0 r1

# Load "01000" into r1. 3 bits left.
lshift0 r1
lshift1 r1
lshift0 r1
lshift0 r1
lshift0 r1



# BIT 11:

# Load byte 1
move r7 r0
increment r0
load r4

# Clear r5
set 00000000
move r0 r5

# Move b11 into r5
lshiftc r4
lshiftc r5

# If the pattern matches an error for b11, invert the bit
set 00011111
move r0 r2
bneq r2 r3 skip_b11

# Shift a 1 into r5 which will be xored after the branch.
lshift1 r5

# RXOR r5 to invert if needed, store the bit in r1
skip_b11: rxor r5
rshiftc r0
lshiftc r1


# BIT 10:

# Clear r5
set 00000000
move r0 r5

# Move b10 into r5
lshiftc r4
lshiftc r5

# If the pattern matches an error for b10, invert the bit
set 00011101
move r0 r2
bneq r2 r3 skip_b10

# Shift a 1 into r5 which will be xored after the branch.
lshift1 r5

# RXOR r5 to invert if needed, store the bit in r1
skip_b10: rxor r5
rshiftc r0
lshiftc r1


# BIT 9:

# Clear r5
set 00000000
move r0 r5

# Move b9 into r5
lshiftc r4
lshiftc r5

# If the pattern matches an error for b9, invert the bit
set 00011011
move r0 r2
bneq r2 r3 skip_b9

# Shift a 1 into r5 which will be xored after the branch.
lshift1 r5

# RXOR r5 to invert if needed, store the bit in r1
skip_b9: rxor r5
rshiftc r0
lshiftc r1


# Output byte 1 is now complete. Output the byte.
move r6 r0
increment r0
store r1


# GENERATE OUTPUT BYTE 1

# Reset r1
set 00000000
move r0 r1



# BIT 8:

# Clear r5
set 00000000
move r0 r5

# Move b8 into r5
lshiftc r4
lshiftc r5

# If the pattern matches an error for b8, invert the bit
set 00011001
move r0 r2
bneq r2 r3 skip_b8

# Shift a 1 into r5 which will be xored after the branch.
lshift1 r5

# RXOR r5 to invert if needed, store the bit in r1
skip_b8: rxor r5
rshiftc r0
lshiftc r1


# BIT 7:

# Clear r5
set 00000000
move r0 r5

# Move b7 into r5
lshiftc r4
lshiftc r5

# If the pattern matches an error for b7, invert the bit
set 00010111
move r0 r2
bneq r2 r3 skip_b7

# Shift a 1 into r5 which will be xored after the branch.
lshift1 r5

# RXOR r5 to invert if needed, store the bit in r1
skip_b7: rxor r5
rshiftc r0
lshiftc r1


# BIT 6:

# Clear r5
set 00000000
move r0 r5

# Move b6 into r5
lshiftc r4
lshiftc r5

# If the pattern matches an error for b6, invert the bit
set 00010101
move r0 r2
bneq r2 r3 skip_b6

# Shift a 1 into r5 which will be xored after the branch.
lshift1 r5

# RXOR r5 to invert if needed, store the bit in r1
skip_b6: rxor r5
rshiftc r0
lshiftc r1


# BIT 5:

# Clear r5
set 00000000
move r0 r5

# Move b5 into r5
lshiftc r4
lshiftc r5

# If the pattern matches an error for b5, invert the bit
set 00010011
move r0 r2
bneq r2 r3 skip_b5

# Shift a 1 into r5 which will be xored after the branch.
lshift1 r5

# RXOR r5 to invert if needed, store the bit in r1
skip_b5: rxor r5
rshiftc r0
lshiftc r1


# BIT 4:

# Load byte 2
move r7 r0
load r4

# Clear r5
set 00000000
move r0 r5

# Move b4 into r5
lshiftc r4
lshiftc r5

# If the pattern matches an error for b4, invert the bit
set 00001111
move r0 r2
bneq r2 r3 skip_b4

# Shift a 1 into r5 which will be xored after the branch.
lshift1 r5

# RXOR r5 to invert if needed, store the bit in r1
skip_b4: rxor r5
rshiftc r0
lshiftc r1


# BIT 3:

# Clear r5
set 00000000
move r0 r5

# Move b3 into r5
lshiftc r4
lshiftc r5

# If the pattern matches an error for b3, invert the bit
set 00001101
move r0 r2
bneq r2 r3 skip_b3

# Shift a 1 into r5 which will be xored after the branch.
lshift1 r5

# RXOR r5 to invert if needed, store the bit in r1
skip_b3: rxor r5
rshiftc r0
lshiftc r1


# BIT 2:

# Clear r5
set 00000000
move r0 r5

# Move b2 into r5
lshiftc r4
lshiftc r5

# If the pattern matches an error for b2, invert the bit
set 00001011
move r0 r2
bneq r2 r3 skip_b2

# Shift a 1 into r5 which will be xored after the branch.
lshift1 r5

# RXOR r5 to invert if needed, store the bit in r1
skip_b2: rxor r5
rshiftc r0
lshiftc r1


# BIT 1:

# Clear r5
set 00000000
move r0 r5

# Move b1 into r5
lshift0 r4 # Skip a bit
lshiftc r4
lshiftc r5

# If the pattern matches an error for b1, invert the bit
set 00000111
move r0 r2
bneq r2 r3 skip_b1

# Shift a 1 into r5 which will be xored after the branch.
lshift1 r5

# RXOR r5 to invert if needed, store the bit in r1
skip_b1: rxor r5
rshiftc r0
lshiftc r1


# Output byte 2 is now complete. Output the byte.
move r6 r0
store r1





# Increment counters by 2
increment r6
increment r6
increment r7
increment r7

# Set r3 to 30
set 00011110
move r0 r3

# If r6 is less than 30, repeat the loop
blt r6 r3 whileloop

# Raise the done flag
done
# R0 is destination register

# R1 holds byte 1
# R2 holds byte 2

# R3 is free

# R4 holds the 5 parity bits

# R5 holds output byte

# R6 holds input memory address
# R7 holds output memory address

setbranch whileloop 00000

# Sets r5 & r6 to 0
set 00000000
move r0 r1
move r0 r2
move r0 r3
move r0 r4
move r0 r5
move r0 r6

# Sets r7 to 30
set 00011110 # set r0 to 30
move r0 r7   # moves r0 to r7

# WHILE R7 < 30     (condition set at branch)

# Load bytes 1 and 2 into r1 and r2
whileloop: move r6 r0
load r2
increment r0
load r1

# GENERATE P8 (b11:5)

# Load bytes 1 & 2
move r6 r0
load r2
increment r0
load r1

# Shift bits from byte 1
rshiftc r1 # b9
lshiftc r3
rshiftc r1 # b10
lshiftc r3
rshiftc r1 # b11
lshiftc r3

# Shift bits from byte 2
lshiftc r2 # b8
lshiftc r3
lshiftc r2 # b7
lshiftc r3
lshiftc r2 # b6
lshiftc r3
lshiftc r2 # b5
lshiftc r3
lshiftc r2 # b4
lshiftc r2 # b3
lshiftc r2 # b2
lshiftc r2 # b1

# RXOR the bits in r3, shift the parity bit into r4
rxor r3
rshiftc r0
lshiftc r4


# GENERATE P4 (b11:8,4,3,2)

# Load bytes 1 & 2
move r6 r0
load r2
increment r0
load r1

# Shift bits from byte 1
rshiftc r1 # b9
lshiftc r3
rshiftc r1 # b10
lshiftc r3
rshiftc r1 # b11
lshiftc r3

# Shift bits from byte 2
lshiftc r2 # b8
lshiftc r3
lshiftc r2 # b7
lshiftc r2 # b6
lshiftc r2 # b5
lshiftc r2 # b4
lshiftc r3
lshiftc r2 # b3
lshiftc r3
lshiftc r2 # b2
lshiftc r3
lshiftc r2 # b1

# Shift in a 0 just in case
lshift0 r3

# RXOR the bits in r3, shift the parity bit into r4
rxor r3
rshiftc r0
lshiftc r4



# GENERATE P2 (b11,10,7,6,4,3,1)

# Load bytes 1 & 2
move r6 r0
load r2
increment r0
load r1

# Shift bits from byte 1
rshiftc r1 # b9
rshiftc r1 # b10
lshiftc r3
rshiftc r1 # b11
lshiftc r3

# Shift bits from byte 2
lshiftc r2 # b8
lshiftc r2 # b7
lshiftc r3
lshiftc r2 # b6
lshiftc r3
lshiftc r2 # b5
lshiftc r2 # b4
lshiftc r3
lshiftc r2 # b3
lshiftc r3
lshiftc r2 # b2
lshiftc r2 # b1
lshiftc r3

# Shift in a 0 just in case
lshift0 r3

# RXOR the bits in r3, shift the parity bit into r4
rxor r3
rshiftc r0
lshiftc r4



# GENERATE P1 (11,9,7,5,4,2,1)

# Load bytes 1 & 2
move r6 r0
load r2
increment r0
load r1

# Shift bits from byte 1
rshiftc r1 # b9
lshiftc r3
rshiftc r1 # b10
rshiftc r1 # b11
lshiftc r3

# Shift bits from byte 2
lshiftc r2 # b8
lshiftc r2 # b7
lshiftc r3
lshiftc r2 # b6
lshiftc r2 # b5
lshiftc r3
lshiftc r2 # b4
lshiftc r3
lshiftc r2 # b3
lshiftc r2 # b2
lshiftc r3
lshiftc r2 # b1
lshiftc r3

# Shift in a 0 just in case
lshift0 r3

# RXOR the bits in r3, shift the parity bit into r4
rxor r3
rshiftc r0
lshiftc r4



# GENERATE P0

# Load bytes 1 & 2
move r6 r0
load r2
increment r0
load r1

# Shift XOR of parity bits into byte 1
set 00001111
and r4 r0
rxor r0
rshiftc r0
lshiftc r1

# Shift XOR of byte 2 into byte 1
rxor r2
rshiftc r0
lshiftc r1

# Shift XOR of byte 1 as parity bit
rxor r1
rshiftc r0
lshiftc r4

# PARITY BITS COMPLETE IN R4 (XXX84210). Move to left.
lshift0 r4
lshift0 r4
lshift0 r4





#   CODE TO FIND OUTPUT BYTE 1

# Load bytes 1 & 2
move r6 r0
load r2
increment r0
load r1

# Move byte 1 into r5 as an output byte
move r1 r5

# Move byte 2 into r0
move r2 r0

# Move b8 into r5
lshiftc r0
lshiftc r5

# Move b7 into r5
lshiftc r0
lshiftc r5

# Move b6 into r5
lshiftc r0
lshiftc r5

# Move b5 into r5
lshiftc r0
lshiftc r5

# Move p8 into r5
lshiftc r4
lshiftc r5

#   OUTPUT BYTE 1 is COMPLETE! Load into output the increment output address for next byte
move r7 r0
increment r0
store r5






#   CODE TO FIND OUTPUT BYTE 2

# Load bytes 1 & 2
move r6 r0
load r2
increment r0
load r1

# Move byte 2 into r0
move r2 r0

# Move b4 into r5
lshift0 r0
lshift0 r0
lshift0 r0
lshift0 r0
lshiftc r0
lshiftc r5

# Move b3 into r5
lshiftc r0
lshiftc r5

# Move b2 into r5
lshiftc r0
lshiftc r5

# Move p4 into r5
lshiftc r4
lshiftc r5

# Move b1 into r5
lshiftc r0
lshiftc r5

# Move p2 into r5
lshiftc r4
lshiftc r5

# Move p1 into r5
lshiftc r4
lshiftc r5

# Move p0 into r5
lshiftc r4
lshiftc r5

#   OUTPUT BYTE 2 is COMPLETE! Load into output the increment output address for next byte
move r7 r0
store r5
increment r7
increment r7
increment r6
increment r6



# Set r3 to 30
set 00011110
move r0 r3

# If r6 is less than 30, repeat the loop
blt r6 r3 whileloop

# Raise the done flag
done
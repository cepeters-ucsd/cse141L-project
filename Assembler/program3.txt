# R0 is destination register

# R1 holds current pattern
# R2 holds byte being shifted in

# R3 holds # of matches in current byte

# R4-5 are free

# R6 holds the pattern

# R7 holds the current bit

setbranch whileloop 10000
setbranch skip_match 10001
setbranch skip_new_byte 10010

# Sets r1:r7 to 0
set 00000000
move r0 r1
move r0 r2
move r0 r3
move r0 r4
move r0 r5
move r0 r6
move r0 r7

# Clears mems 33:35
set 00000000
move r0 r4
set 00100001
store r4
increment r0
store r4
increment r0
store r4

# Loads mem 32 into r6
set 00100000
load r6

# Moves to last 5 bits
rshift0 r6
rshift0 r6
rshift0 r6

# Load byte 1 into r2
move r6 r0
load r2

# Move first 4 bits of byte 1 into r1
lshiftc r2
lshiftc r1
lshiftc r2
lshiftc r1
lshiftc r2
lshiftc r1
lshiftc r2
lshiftc r1



# WHILE R7 < 251     (condition set at branch)

# Shift a bit into r1
whileloop: lshiftc r2
lshiftc r1

# Set r1 to only have the last 5 bits
set 00011111
and r0 r1
move r0 r1

# IF THE PATTERN MATCHES:

bneq r1 r6 skip_match

# Increment [35]
set 00100011
load r4
increment r4
store r4

# IF THE PATTERN IS IN A BOUNDED BYTE:
set 00000100
and r0 r7
move r0 r4
set 00000000
move r0 r5
bneq r4 r5 skip_match

# Increment [33]
set 00100001
load r4
increment r4
store r4

# Add a bit into r3
lshift1 r3




# After the pattern matching...

# Check the last 3 bits of the address
skip_match: set 00000111
and r7 r0
move r0 r4
set 00000011
move r0 r5

# IF THE LAST 3 BITS ARE 011:
bneq r4 r5 skip_new_byte

# Increment [34]
set 00100010
load r4
increment r4
store r4

# Load a new byte into r2
move r7 r0
rshift0 r0
rshift0 r0
rshift0 r0
increment r0
load r2

# Check the last 4 bits of r3
set 00001111
and r3 r0
move r0 r4
set 00000000
move r0 r5

# Reset r3
move r0 r3

# IF THE LAST 4 BYTES ARE 0000
bneq r4 r5 skip_new_byte

# Decrement [34]
set 00100010
load r4
decrement r4
store r4




# Increment the bit counter
skip_new_byte: increment r7

# If r7 is less than 252, repeat the loop
set 11111100
move r0 r4
blt r7 r4 whileloop

# Raise the done flag
done